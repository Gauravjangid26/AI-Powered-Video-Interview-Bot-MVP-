Got it ‚Äî you want a one-day roadmap to build the MVP of this AI-Powered Video Interview Bot using Streamlit and mostly open-source tools.

Here‚Äôs how we can split the work into phases with time blocks so you can ship it in one day:

üó∫ One-Day Roadmap (8‚Äì10 hours)
Hour 0 ‚Äì 0.5: Setup & Boilerplate
Install Streamlit, OpenAI Whisper (or faster open-source ASR), transformers for LLM, pydub for audio handling.

Create app.py with a basic Streamlit page layout:

Left: Interview UI for candidate.

Right: Report UI for recruiter.

Setup a role description input form.

Hour 0.5 ‚Äì 2: LLM Integration (Open-Source)
Use Hugging Face models for:

Intro & question generation ‚Üí tiiuae/falcon-7b-instruct (light, runs via transformers + text-generation-inference or API).

Summary & evaluation ‚Üí same model or mistralai/Mistral-7B-Instruct.

Build prompt templates:

Intro Prompt: ‚ÄúYou are an interviewer for the role: {role}. Write a short greeting‚Ä¶‚Äù

Question Prompt: ‚ÄúGenerate 5‚Äì7 interview questions for the role: {role}‚Ä¶‚Äù

Evaluation Prompt: ‚ÄúAnalyze the following responses‚Ä¶‚Äù

Mock the role description as JSON for quick testing.

Hour 2 ‚Äì 4: Video Recording in Streamlit
Use streamlit-webrtc for browser-based video recording.

Store recorded videos in temp/ folder as .webm or .mp4.

Allow candidate to review & re-record before submitting.

Hour 4 ‚Äì 5: Speech-to-Text (Open Source)
Use openai/whisper or faster-whisper for transcription (runs locally).

After video submission:

Extract audio with ffmpeg (via pydub or subprocess).

Transcribe to text.

Store both video + transcription in a responses.json.

Hour 5 ‚Äì 6: AI-Based Summary & Skill Evaluation
Feed transcriptions + role description into LLM.

Output structured JSON:

json
Copy
Edit
{
  "summary": "...",
  "strengths": ["...", "..."],
  "weaknesses": ["...", "..."],
  "skill_rating": {
    "Technical": 8,
    "Communication": 7,
    "Problem Solving": 6
  }
}
Render results in Streamlit recruiter view.

Hour 6 ‚Äì 7: UI Enhancements
Candidate view:

Progress bar for questions (1 of 7).

Next button after each video.

Recruiter view:

Summary + ratings in cards.

Option to download report as PDF (fpdf or reportlab).

Hour 7 ‚Äì 8: Testing & Polishing
Test with 1‚Äì2 mock role descriptions.

Verify:

Questions are role-specific.

Video saves properly.

Transcription works.

Summary & ratings are meaningful.

Add error handling for mic/camera permissions.

Final README with:

Tech stack.

Setup commands.

How to run (streamlit run app.py).

Tech Stack Recap
‚úÖ Frontend/UI: Streamlit + streamlit-webrtc (video recording)
‚úÖ LLM: Hugging Face Falcon/Mistral (role intro, questions, summaries)
‚úÖ Speech-to-Text: faster-whisper (local transcription)
‚úÖ Audio/Video Processing: ffmpeg + pydub
‚úÖ Data Storage: JSON files (MVP)
‚úÖ PDF Report: fpdf

